package com.green.vo;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

public class MemberDAO {//데이터베이스 연동을 위한 클래스
	
	
	/////////////////////////////////////////
	//3단계
	private MemberDAO(){}
	
	private static MemberDAO dao = new MemberDAO();
	
	public static MemberDAO getInstance() {
		return dao;
	}
	/////////////////////////////////////////
	//4단계 DBCP 등록 => 데이터베이스 접속용 메소드
	
	public Connection getConnection() throws Exception{
		Connection conn = null;
		Context initContext = new InitialContext();
		Context envContext  = (Context)initContext.lookup("java:/comp/env");
		DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
		conn = ds.getConnection();
		
		return conn;
	}
	////////////////////////////////////////////////
	//8단계
	// +찾아온 회원 정보를 통해서 비밀번호 일치 여부로 인증처리하는 기능
 	
	//아이디를 통해서 회원 정보 찾아오기
	public MemberVO getMember(String userid) {
		MemberVO mVo = null;
		String sql = "SELECT * FROM member WHERE userid = ?";
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			psmt.setString(1, userid);
			
			rs = psmt.executeQuery();
			
			if(rs.next()) {
				mVo = new MemberVO();
				mVo.setName(rs.getString("name"));
				mVo.setUserid(rs.getString("userid"));
				mVo.setUserpwd(rs.getString("userpwd"));
				mVo.setEmail(rs.getString("email"));
				mVo.setPhone(rs.getString("phone"));
				mVo.setAdmin(rs.getInt("admin"));
			}
		
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs != null)rs.close();
				if(psmt != null)psmt.close();
				if(conn != null)conn.close();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}	
		return mVo;
		
 	}
	
	//사용자 인증 처리 메소드
	public int userCheck(String userid,String userpwd) {
		int result = -1;
		String sql = "SELECT userpwd FROM member WHERE userid = ?";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		ResultSet rs = null;
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			psmt.setNString(1, userid);
			
			rs = psmt.executeQuery();
			
			if(rs.next()) {
				if(rs.getString("userpwd")!=null && rs.getString("userpwd").equals(userpwd)) {
					result = 1;//로그인 성공
				}else {
					result = 0;	//비밀번호가 null이거나, 비밀번호가 일치하지않는 경우
				}
				
			}else { //아이디를 찾을 수 없는 경우
				result = -1;
			}
		
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(rs != null)rs.close();
				if(psmt != null)psmt.close();
				if(conn != null)conn.close();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}	
		return result;
	}
	//아이디 중복 체크를 위한 메소드
	public int confirmID(String userid) {
		int result = -1;
		String sql = "SELECT userid FROM member WHERE userid=?";
			
			Connection conn = null;
			PreparedStatement psmt = null;
			ResultSet rs = null;
			
			try {
				conn = getConnection();
				psmt = conn.prepareStatement(sql);
				psmt.setNString(1, userid);
				
				rs = psmt.executeQuery();
				
				if(rs.next()) { //아이디가 존재=> 중복
					result=1;
				}else {//아이디가 부존재 =? 중복X
					result=-1;
				}
			
			}catch(Exception e) {
				e.printStackTrace();
			}finally {
				try {
					if(rs != null)rs.close();
					if(psmt != null)psmt.close();
					if(conn != null)conn.close();
				}catch(Exception e) {
					e.printStackTrace();
				}
			}	
			return result;
	}
	//회원 가입시 적용할 쿼리문 작성할 메소드
	public int insertMember(MemberVO mVo) {
		int result = -1;
		
		String sql =  "INSERT INTO member VALUES(?,?,?,?,?,?)";
		
		Connection conn = null;
		PreparedStatement psmt = null;
		
		try {
			conn = getConnection();
			psmt = conn.prepareStatement(sql);
			
			psmt.setString(1,mVo.getName());
			psmt.setString(2,mVo.getUserid());
			psmt.setString(3,mVo.getUserpwd());
			psmt.setString(4,mVo.getEmail());
			psmt.setString(5,mVo.getPhone());
			psmt.setInt(6,mVo.getAdmin());
			
			result = psmt.executeUpdate();
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(psmt!=null)psmt.close();
				if(conn!=null)conn.close();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		return result;
	}
	
	//회원 정보를 업데이트하기 위한 쿼리를 작동 시킬 메소드
	public int updateMember(MemberVO mVo) {
		int result = -1;
		
		String sql = "UPDATE member SET WHERE userid=?, email=?, phone=?, admin=? WHERE userid=?";
		
		return result;
	}
	
	
	
	
	
	
	
}
